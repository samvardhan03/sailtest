# -*- coding: utf-8 -*-
"""Sailbottrainipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CW4P9hcAguVcBRLJJIIZZqcKI2cUd3pd
"""

import nltk
from nltk.stem.lancaster import LancasterStemmer
import numpy as np
import tensorflow as tf
import random
import json
import pickle

from google.colab import files
uploaded = files.upload()

with open('intents.json') as file:
    intents = json.load(file)

nltk.download('punkt')

# Preprocess the data
stemmer = LancasterStemmer()
words = []
classes = []
documents = []
ignore_words = ['?']
for intent in intents['intents']:
    for pattern in intent['patterns']:
        w = nltk.word_tokenize(pattern)
        words.extend(w)
        documents.append((w, intent['tag']))
        if intent['tag'] not in classes:
            classes.append(intent['tag'])
classes = [tuple(c) for c in classes] # convert lists to tuples
classes = sorted(list(set(classes)))
words = [stemmer.stem(w.lower()) for w in words if w not in ignore_words]
words = sorted(list(set(words)))
training = []
output = []
output_empty = [0] * len(classes)
for doc in documents:
    bag = []
    pattern_words = doc[0]
    pattern_words = [stemmer.stem(word.lower()) for word in pattern_words]
    for w in words:
        bag.append(1) if w in pattern_words else bag.append(0)
    output_row = list(output_empty)
    output_row[classes.index(tuple(doc[1]))] = 1 # convert tag to tuple
    training.append([bag, output_row])
random.shuffle(training)
training = np.array(training)
train_x = list(training[:,0])
train_y = list(training[:,1])

model = tf.keras.Sequential([
    tf.keras.layers.Dense(8, input_shape=(len(train_x[0]),), activation='relu'),
    tf.keras.layers.Dense(8, activation='relu'),
    tf.keras.layers.Dense(len(train_y[0]), activation='softmax')
])

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

model.fit(np.array(train_x), np.array(train_y), epochs=900, batch_size=8)

model.save('model.h5')
pickle.dump({'words': words, 'classes': classes, 'train_x': train_x, 'train_y': train_y}, open('training_data', 'wb'))

